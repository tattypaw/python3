"""
Задача 16. Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. 
Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
В последующих строках записаны N целых чисел Ai . Последняя строка содержит число X

"""
"""
import random

n = int(input("Задайте размер массива: "))
x = int(input("Введите число: "))
A = []
s = 0
for i in range(n):
  A.append(random.randint(0,10))
  if A[i] == x: s +=1
print(A)
print(f"Число встречается {s} раз")
"""
"""
Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X. 
Пользователь в первой строке вводит натуральное число N – количество элементов в массиве. 
В последующих строках записаны N целых чисел Ai . Последняя строка содержит число X

Вопрос: самый близкий больше этого числа, меньше, а может равный? если их несколько надо было выводить все?
Задача решена для чисел как больше, так и меньше заданного числа, но не равных ему.
"""
"""
import random

n = int(input("Задайте размер массива: "))
x = int(input("Введите число: "))
A = []
for i in range(n):
  A.append(random.randint(0,100))
print(A)

result = A[0]
for i in range(1,len(A)):
  if (x-A[i])**2 < (result-x)**2: 
    if result != 0: result = A[i]
print(f"Cамый близкий по величине элемент к заданному числу {result}")
"""
"""
Задача 20: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским 
алфавитом очки распределяются так: ● A, E, I, O, U, L, N, S, T, R – 1 очко; ● D, G – 2 очка; ● B, C, M, P – 3 очка;
● F, H, V, W, Y – 4 очка; ● K – 5 очков; ● J, X – 8 очков; ● Q, Z – 10 очков. А русские буквы оцениваются так: 
● А, В, Е, И, Н, О, Р, С, Т – 1 очко; ● Д, К, Л, М, П, У – 2 очка; ● Б, Г, Ё, Ь, Я – 3 очка; ● Й, Ы – 4 очка; 
● Ж, З, Х, Ц, Ч – 5 очков; ● Ш, Э, Ю – 8 очков; ● Ф, Щ, Ъ – 10 очков. Напишите программу, которая вычисляет стоимость 
введенного пользователем слова. Будем считать, что на вход подается только одно слово, которое содержит либо только 
английские, либо только русские буквы.
"""
"""
def Summa(dic, st):
    sum = 0
    for i in range(len(st)):
        sum +=dic.get(st[i])
    return sum

en = {'A':1, 'E':1, 'I':1, 'O':1, 'U':1, 'L':1, 'N':1, 'S':1, 'T':1, 'R':1, 'D':2, 'G':2, 'B':3, 'C':3, 'M':3, 'P':3, 'F':4, 'H':4, 'V':4, 'W':4, 'Y':4, 'K':5, 'J':8, 'X':8, 'Q':10, 'Z':10}
ru = {'А':1, 'В':1, 'Е':1, 'И':1, 'Н':1, 'О':1, 'Р':1, 'С':1, 'Т':1, 'Д':2, 'К':2, 'Л':2, 'М':2, 'П':2, 'У':2, 'Б':3, 'Г':3, 'Ё':3, 'Ь':3, 'Я':3, 'Й':4, 'Ы':4, 'Ж':5, 'З':5, 'Х':5, 'Ц':5, 'Ч':5, 'Ш':8, 'Э':8, 'Ю':8,'Ф':10, 'Щ':10, 'Ъ':10}

slovo = input("Введите слово: ")
slovo = slovo.upper()

print("Количество баллов: ", end='')
print(Summa(en, slovo)) if slovo[0] in en else print(Summa(ru, slovo))
"""
"""
Задача HARD необязательная Имеется список чисел. Создайте список, 
в который попадают числа, описывающие максимальную 
возрастающую последовательность. Порядок элементов менять нельзя.
Одно число - это не последовательность.
Пример:
[1, 5, 2, 3, 4, 6, 1, 7] => [1, 7]
[1, 5, 2, 3, 4, 1, 7, 8 , 15 , 1 ] => [1, 5]
[1, 5, 3, 4, 1, 7, 8 , 15 , 1 ] => [3, 5]
"""
import random

n = int(input("Задайте размер массива: ")) #заполнение случайными числами
A = []
for i in range(n):
  A.append(random.randint(0,10))

print(A)
"""
A = [1,2,0,3,4,6,7,8,10,9,12,16,17,18,19,20,0,4,1,2,6,3,0] #тестовый список
n=len(A)
"""
lst = {}                    #результат обработки массива
m = 0                       #индекс максимальной длины последовательности, первое значение
for i in range(n):
    s=0                     #длина последовательности i-го элемента
    a = A[i]                #число, следующее число попорядку
    for j in range(n):
        if a + 1 in A: s += 1; a += 1
        else: break
    lst[i]=s       #длина последовательности, номер элемента с которой она начинается
    if s>lst[m]: m=i        #вычисление индекса максимальной длины последовательности

lst_max=[m]                 #нахождение всех индексов последовательностей длины м
for i in range(m + 1, n):
    if lst[i] == lst[m] : lst_max.append(i)

                     #нахождение и удаление дублей
for i in range(len(lst_max)):
    if i == len(lst_max):break
    max_search = A[lst_max[i]]
    flag_j = 0
    for j in range(i+1, len(lst_max)):
        j +=flag_j
        if max_search == A[lst_max[j]]: 
            del(lst_max[j])
            flag_j -=1
if m == 0: print("Последовательностей нет")
else: 
    for i in lst_max:
        res = [A[i], A[i]+lst[i]] 
        print(res)


